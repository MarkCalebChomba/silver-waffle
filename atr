import ccxt
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import StandardScaler
import time
import traceback
from datetime import datetime, timedelta
import warnings
warnings.filterwarnings('ignore')

# Configuration
API_CREDENTIALS = {
    'api_key': '544d6587-0a7d-4b73-bb06-0e3656c08a18',
    'secret_key': '9C2CA165254391E4B4638DE6577288BD',
    'passphrase': '#Dinywa15'
}

TRADING_CONFIG = {
    'symbol': 'DOGE/USDT:USDT',
    'leverage': 5,
    'timeframe': '15m',
    'historical_limit': 10000,
    'retrain_interval': 60
}

RISK_CONFIG = {
    'atr_multiplier': 3,
    'risk_percent': 0.01,
    'min_confidence': 0.6,
    'contract_size': 10000  # DOGE per contract
}

def calculate_atr(df, period=14):
    high = df['High']
    low = df['Low']
    close = df['Close']
    
    tr = pd.DataFrame({
        'h_l': high - low,
        'h_pc': abs(high - close.shift(1)),
        'l_pc': abs(low - close.shift(1))
    }).max(axis=1)
    
    atr = tr.rolling(period).mean()
    return atr

class MLTradingBot:
    def __init__(self):
        self.exchange = ccxt.okx({
            'apiKey': API_CREDENTIALS['api_key'],
            'secret': API_CREDENTIALS['secret_key'],
            'password': API_CREDENTIALS['passphrase'],
            'enableRateLimit': True,
            'sandboxMode': True,
            'options': {'defaultType': 'swap'}
        })
        self.exchange.set_sandbox_mode(True)
        
        try:
            self.symbol = TRADING_CONFIG['symbol']
            self.leverage = TRADING_CONFIG['leverage']
            self.timeframe = TRADING_CONFIG['timeframe']
            self.model = RandomForestClassifier(n_estimators=200, random_state=42)
            self.scaler = StandardScaler()
            
            # Position tracking variables
            self.position_entry_price = None
            self.position_atr = None
            self.position_direction = None
            self.take_profit = None
            self.stop_loss = None
            
        except Exception as e:
            print(f"Initialization error: {str(e)}")
            raise e

    def calculate_all_indicators(self, df):
        try:
            df['ATR'] = calculate_atr(df)
            return df
        except Exception as e:
            print(f"Indicator error: {str(e)}")
            raise e

    def execute_trade(self, signal, confidence, df):
        try:
            balance = self.exchange.fetch_balance()['USDT']['free']
            if balance <= 0:
                print("No available balance")
                return

            atr_value = df['ATR'].iloc[-1]
            risk_amount = balance * RISK_CONFIG['risk_percent']
            desired_contracts = risk_amount / (atr_value * RISK_CONFIG['atr_multiplier'] * RISK_CONFIG['contract_size'])

            if atr_value <= 0:
                print("Invalid ATR value")
                return

            self.position_atr = atr_value
            desired_contracts = round(desired_contracts * 100) / 100
            
            if desired_contracts < 0.01 or desired_contracts * atr_value * RISK_CONFIG['atr_multiplier'] * RISK_CONFIG['contract_size'] > balance:
                print("Position too small or insufficient margin")
                return

            self.exchange.set_leverage(self.leverage, self.symbol)

            positions = self.exchange.fetch_positions([self.symbol])
            current_pos = next((p for p in positions if p['symbol'] == self.symbol), None)
            if current_pos and float(current_pos['contracts']) > 0:
                current_side = current_pos['side']
                if (signal > 0 and current_side == 'long') or (signal < 0 and current_side == 'short'):
                    self.close_position()

            if abs(desired_contracts) >= 0.01:
                # Reverse trading signals
                side = 'sell' if signal > 0 else 'buy'
                pos_side = 'short' if signal > 0 else 'long'
                
                self.exchange.create_order(
                    self.symbol,
                    'market',
                    side,
                    abs(desired_contracts),
                    params={
                        'posSide': pos_side,
                        'tdMode': 'cross',
                        'leverage': self.leverage
                    }
                )
                
                self.position_entry_price = df['Close'].iloc[-1]
                self.position_atr = atr_value
                self.position_direction = pos_side
                
                # Set TP/SL with reversed conditions
                if pos_side == 'long':
                    self.take_profit = self.position_entry_price + (RISK_CONFIG['atr_multiplier'] * atr_value)
                    self.stop_loss = self.position_entry_price * 0.98  # 2% SL
                else:
                    self.take_profit = self.position_entry_price - (RISK_CONFIG['atr_multiplier'] * atr_value)
                    self.stop_loss = self.position_entry_price * 1.02  # 2% SL

                print(f"Opened {pos_side} position. TP: {self.take_profit}, SL: {self.stop_loss}")

        except Exception as e:
            print(f"Trade error: {str(e)}")
            print(traceback.format_exc())

    def check_tp_sl(self):
        if not self.position_direction:
            return

        try:
            ticker = self.exchange.fetch_ticker(self.symbol)
            current_price = ticker['last']
            
            if self.position_direction == 'long':
                if current_price >= self.take_profit:
                    print("TP triggered for long position")
                    self.close_position()
                elif current_price <= self.stop_loss:
                    print("SL triggered for long position")
                    self.close_position()
            elif self.position_direction == 'short':
                if current_price <= self.take_profit:
                    print("TP triggered for short position")
                    self.close_position()
                elif current_price >= self.stop_loss:
                    print("SL triggered for short position")
                    self.close_position()
                    
        except Exception as e:
            print(f"TP/SL check error: {str(e)}")

    def close_position(self):
        try:
            positions = self.exchange.fetch_positions([self.symbol])
            current_pos = next((p for p in positions if p['symbol'] == self.symbol and float(p['contracts']) > 0), None)
            if not current_pos:
                return

            side = 'sell' if current_pos['side'] == 'long' else 'buy'
            self.exchange.create_order(
                self.symbol,
                'market',
                side,
                float(current_pos['contracts']),
                params={
                    'posSide': current_pos['side'],
                    'reduceOnly': True
                }
            )
            print(f"Closed {current_pos['side']} position")
            
            self.position_entry_price = None
            self.position_atr = None
            self.position_direction = None
            self.take_profit = None
            self.stop_loss = None
            
        except Exception as e:
            print(f"Close error: {str(e)}")

    def prepare_features(self, df):
        try:
            df = df.dropna()
            features = df[['Close', 'ATR']]
            scaled_features = self.scaler.fit_transform(features)
            return scaled_features
        except Exception as e:
            print(f"Feature error: {str(e)}")
            return None

    def run_backtest(self, df):
        initial_capital = 100
        capital = initial_capital
        trades = []

        df = self.calculate_all_indicators(df)
        df = df.dropna().reset_index(drop=True)

        features_all = self.scaler.fit_transform(df[['Close', 'ATR']])
        warmup = 50

        for i in range(warmup, len(df) - 1):
            train_features = features_all[:i]
            train_labels = (df['Close'].shift(-1) > df['Close']).astype(int).iloc[:i]
            self.model.fit(train_features, train_labels)
            
            feature_current = features_all[i].reshape(1, -1)
            prediction = self.model.predict(feature_current)[0]
            confidence = max(self.model.predict_proba(feature_current)[0])
            
            if confidence > RISK_CONFIG['min_confidence']:
                # Reverse signal for backtest
                signal = -1 if prediction == 1 else 1
                entry_price = df['Open'].iloc[i + 1]
                exit_price = df['Close'].iloc[i + 1]
                
                if signal == 1:
                    profit = (exit_price - entry_price) / entry_price * capital
                else:
                    profit = (entry_price - exit_price) / entry_price * capital

                capital += profit
                trades.append({
                    'index': i,
                    'signal': signal,
                    'entry_price': entry_price,
                    'exit_price': exit_price,
                    'profit': profit,
                    'capital': capital
                })
        
        print("Backtest results:")
        print(f"Initial Capital: {initial_capital}")
        print(f"Final Capital: {capital}")
        print(f"Total Return: {((capital - initial_capital)/initial_capital)*100:.2f}%")
        return trades

    def run(self):
        print("Starting inverted strategy bot...")
        while True:
            try:
                ohlcv = self.exchange.fetch_ohlcv(self.symbol, self.timeframe, limit=TRADING_CONFIG['historical_limit'])
                df = pd.DataFrame(ohlcv, columns=['Timestamp', 'Open', 'High', 'Low', 'Close', 'Volume'])
                df = self.calculate_all_indicators(df)
                df = df.dropna()

                self.check_tp_sl()
                
                features = self.prepare_features(df)
                if features is None:
                    continue

                labels = (df['Close'].shift(-1) > df['Close']).astype(int)
                labels = labels.iloc[:-1]
                features = features[:-1]

                if len(features) == len(labels):
                    self.model.fit(features, labels)
                
                prediction = self.model.predict(features[-1:])[0]
                confidence = max(self.model.predict_proba(features[-1:])[0])
                
                if confidence > RISK_CONFIG['min_confidence']:
                    # Invert prediction signal
                    signal = -1 if prediction == 1 else 1
                    self.execute_trade(signal, confidence, df)
                
                time.sleep(60)
                
            except Exception as e:
                print(f"Main error: {str(e)}")
                print(traceback.format_exc())
                time.sleep(60)

if __name__ == "__main__":
    try:
        bot = MLTradingBot()
        ohlcv = bot.exchange.fetch_ohlcv(bot.symbol, bot.timeframe, limit=TRADING_CONFIG['historical_limit'])
        df = pd.DataFrame(ohlcv, columns=['Timestamp', 'Open', 'High', 'Low', 'Close', 'Volume'])
        backtest_trades = bot.run_backtest(df)
        bot.run()
    except Exception as e:
        print(f"Critical error: {str(e)}")
